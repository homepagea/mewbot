fs = require 'fs'


class JSONRPCClient
   constructor : (@baseURL,@cookies) ->
     @restful = require 'restler' 
     if typeof @cookies is 'undefined'
       @cookies = {}

   setCookie : (key,value) ->
     @cookies[key]=value

   getCookies : ->
     cookieString = ""
     for cookieKey,cookieValue of @cookies
       cookieString=cookieString+cookieKey+"="+cookieValue+";"
     return cookieString
     
   login: (loginURL,loginData,callback,error) ->
        queryData = loginData
        headers = Cookie : @getCookies()
        options = data : queryData , headers : headers
        @restful.post(loginURL, options).on 'complete', (data,response) =>
         @handleResponseCookie response
         try
            if callback
               callback(data)
         catch e
            if error
              error(e)

   handleResponseCookie : (response) ->
     try
        if response and typeof response.headers['set-cookie'] isnt 'undefined'
            for cookie in response.headers['set-cookie']
              cookieIndex = cookie.indexOf('=')
              cookieEndIndex = cookie.indexOf(';')
              cookieName = cookie.substr(0,cookieIndex)
              cookieValue = ""
              if cookieEndIndex >= 0 
                 cookieValue = cookie.substr(cookieIndex+1,cookieEndIndex-cookieIndex-1)
              else
                 cookieValue = cookie.substr(cookieIndex+1)
              @setCookie(cookieName,cookieValue)
     catch e
        console.log "#{e.stack}"

   jsonrpcFile : (file,type,method,params,callback,error) ->
     query = jsonrpc : "2.0", method : method , params : params , id : new Date().getTime()
     headers = Cookie : @getCookies()
     fs.stat file, (err,stats) =>
        queryData = query : JSON.stringify(query) , file : @restful.file(file,null,stats.size,null,type) , fileid : "file"
        options = data : queryData , headers : headers , multipart: true
        @restful.post(@baseURL, options).on 'complete', (data,response) =>
          try
            @handleResponseCookie response
            wrapper = JSON.parse(data)
            if callback
               callback(wrapper.result,wrapper.error)
          catch e
            
            if error 
               error(e)

   postJSON : (path,queryData,callback)->
     if queryData is null 
        queryData = {}
     else if typeof queryData is 'function'
        callback = queryData
     headers = Cookie : @getCookies()
     options = headers : headers
     @restful.postJson("#{@baseURL}#{path}", queryData,options).on 'complete', (data,response) =>
        try
            @handleResponseCookie response
            wrapper = JSON.parse(data)
            if callback
                callback(null,wrapper)
        catch e
            try
               wrapper = eval(data)
               if callback
                callback(null,wrapper)
            catch ex
              if callback
                  callback(ex)
                
   getJSON : (path,queryData,callback) ->
     if queryData is null 
        queryData = {}
     else if typeof queryData is 'function'
        callback = queryData
        queryData ={}
     headers = Cookie : @getCookies()
     options = data : queryData , headers : headers
     @restful.get("#{@baseURL}#{path}", options).on 'complete', (data,response) =>
        try
            @handleResponseCookie response
            wrapper = JSON.parse(data)
            if callback
                callback(null,wrapper)
         catch e
            try
               wrapper = eval(data)
               if callback
                callback(null,wrapper)
            catch ex
              if callback
                  callback(ex)
                
   jsonrpc : (method,params,callback) ->
     try
       query = jsonrpc : "2.0", method : method , params : params , id : new Date().getTime()
       queryData = query : JSON.stringify(query)
       headers = Cookie : @getCookies()
       options = data : queryData , headers : headers
       post = @restful.post(@baseURL, options)
       post.on 'error',(error,response)=>
         if callback
             callback null,error
       post.on 'complete', (data,response) =>
         try
            @handleResponseCookie response
            wrapper = JSON.parse(data)
            if callback
                callback(wrapper.result,wrapper.error)
         catch e
            if callback
               callback null,e
     catch be
            if callback
               callback null,be

module.exports = JSONRPCClient
           


