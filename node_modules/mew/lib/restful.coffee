Restful = require 'restler' 
{EventEmitter} = require 'events'
Fs = require 'fs'
http = require 'http'


postProcessPromise = (client,promise,callback)->
    promise.handled = false
    promise.callback = callback
    do(client,promise)->
        requestHandleComplete = ->
            if promise.timeout
                clearTimeout(promise.timeout)
        promise.on "complete",requestHandleComplete
        promise.on "error",requestHandleComplete
        if client.maxTimeout
            timeoutPromiseCallback = (client,promise)->
                promise.handled = true
                promise.callback("promise timeout")
            promise.timeout = setTimeout timeoutPromiseCallback,client.maxTimeout,client,promise


class RestfulClient extends EventEmitter
    constructor : (@cookies) ->

    setMaxTimeout : (timeout)->
        @maxTimeout = timeout

    setUserAgent : (agent)->
        if agent
            @userAgent = agent
        else
            @userAgent = process.env.MEWBOT_UA || "mewbot"

    setCookie : (key,value) ->
        if @cookies is undefined
            @cookies = {}
        @cookies[key]=value

    buildHeader : (url)->
        headers = {}
        if @userAgent
            headers["User-Agent"] = @userAgent
        else
            headers["User-Agent"] = process.env.MEWBOT_UA || "mewbot"

        if url
            headers["Referer"] = url

        headers["Cookie"]= @buildCookies()
        return headers

    download : (url,path,callback)->
        request = http.get url,(response)=>
            if response.statusCode is 200
                fstream = Fs.createWriteStream(path)
                response.pipe(fstream)
                if @maxTimeout
                    request.setTimeout @maxTimeout,=>
                        request.abort()
                        callback("request timeout")

                fstream.on "error",=>
                    Fs.unlink(path)
                    fstream.close(callback)

                fstream.on "finish",=>
                    fstream.close(callback)
            else
                request.abort()
                callback("request error : #{response.statusCode}")
        request.on "error",(err)=>
            callback(err)


    getAndRefer : (url,referer,callback)->
        options = headers : @buildHeader(referer)
        promise = Restful.get(url,options)
        promise.on "complete",(data,response)=>
            if response and response.statusCode is 200
                @handleResponseCookie(response)
                if promise.handled is false
                    callback(null,data,response)
            else
                if response
                    callback(response.statusCode)
                else
                    callback("response is null")
        promise.on "error",(err)=>
            callback(err)
        postProcessPromise @,promise,callback

    post : (url,postdata,callback)->
        options = data : postdata , headers : @buildHeader(url)
        promise = Restful.post(url, options)
        promise.on 'complete', (data,response) =>
            if response and response.statusCode is 200
                @handleResponseCookie response
                if promise.handled is false
                    callback(null,data,response)
            else
                if response
                    callback(response.statusCode)
                else
                    callback("response is null")
        promise.on 'error',(err)->
            callback(err)
        postProcessPromise @,promise,callback

    get : (url,callback)->
        @getAndRefer url,url,callback
        
    buildCookies : ->
        if @cookies is undefined
            @cookies = {}
        cookieString = ""
        for cookieKey,cookieValue of @cookies
            cookieString=cookieString+cookieKey+"="+cookieValue+";"
        return cookieString
     
    login: (loginURL,loginData,callback,error) ->
        queryData = loginData
        headers = Cookie : @getCookies()
        options = data : queryData , headers : headers
        Restful.post(loginURL, options).on 'complete', (data,response) =>
            @handleResponseCookie response
            try
                if callback
                    callback(data)
            catch e
                if error
                    error(e)

    handleResponseCookie : (response) ->
        try
            if @cookies is undefined
                @cookies = {}
            if response and typeof response.headers['set-cookie'] isnt 'undefined'
                for cookie in response.headers['set-cookie']
                    cookieIndex = cookie.indexOf('=')
                    cookieEndIndex = cookie.indexOf(';')
                    cookieName = cookie.substr(0,cookieIndex)
                    cookieValue = ""
                    if cookieEndIndex >= 0 
                        cookieValue = cookie.substr(cookieIndex+1,cookieEndIndex-cookieIndex-1)
                    else
                        cookieValue = cookie.substr(cookieIndex+1)
                    @setCookie(cookieName,cookieValue)
        catch e
            console.log "#{e.stack}"


module.exports=RestfulClient