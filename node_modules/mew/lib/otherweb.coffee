jsonrpc = require './jsonrpc.coffee'
{EventEmitter} = require 'events'

class TimelineEvent extends EventEmitter
    constructor : (@otherweb)->
        @callTimeline()

    callTimeline : ->
        headers = Cookie : @otherweb.client.getCookies()
        options = headers : headers
        ievent  =@otherweb.client.restful.post("#{@otherweb.rootURL}/gateway/api/timeline.jsp",options)
        ievent.on "complete",(data,response)=>
            @otherweb.client.handleResponseCookie response
            @callTimeline()
            try
                rdata = JSON.parse(data)
                if rdata.error
                    @emit "error",rdata.error
                else
                    @emit "data",rdata
            catch ex
                @emit "error",ex
        return ievent

class OTHERWebInstance
    constructor : (@userAgent,@rootURL,@username,@password)->
        @loginStatus = "incomplete"
        @requestQueue=[]
        @client = new jsonrpc("#{@rootURL}/gateway/api/jsonrpc.jsp")
        @keepaliveTimeout=null
        @data = {}

    compileObject : (name,functions)->
        callinstance = @[name]={}
        for functionName in functions
            do (functionName)=>
                functionNameKey = functionName
                if functionName.indexOf("!") is 0
                    functionNameKey = functionName.substr(1)
                callinstance[functionNameKey] = (params,callback)=>
                    if typeof params isnt 'function'
                        if Array.isArray params
                            @makeRequest "#{name}.#{functionName}",params,callback
                        else
                            @makeRequest "#{name}.#{functionName}",[params],callback
                    else
                        @makeRequest "#{name}.#{functionName}",[],params


    benchRequest : (path,params,benchcallback)->
        startDate = new Date()
        @makeRequest path,params,(r,e)->
            endDate = new Date()
            if benchcallback
                benchcallback r,e,startDate,endDate

    keepalive : (interval)->
        if @keepaliveTimeout
            clearTimeout(@keepaliveTimeout)
        if interval
            keepaliveCallback = =>
                headers = Cookie : @client.getCookies()
                options = headers : headers
                @client.restful.post("#{@rootURL}/gateway/api/ping.jsp",options).on "complete",(data,response)=>
                    @client.handleResponseCookie response
                    @keepaliveTimeout = setTimeout keepaliveCallback,interval
            @keepaliveTimeout = setTimeout keepaliveCallback,interval

    makeRequest : (path,params,callback)->
        if @loginStatus is 'incomplete' or @loginStatus is 'proceeding'
            if @loginStatus is 'incomplete'
                @loginStatus = 'proceeding'
                @requestQueue = []
            @requestQueue.push {
                path : path ,
                params : params ,
                callback : callback
            }
            @login (error)=>
                if error
                    callback(null,error)
                else
                    for request in @requestQueue
                        @makeRequest request.path,request.params,request.callback
        else
            if path.indexOf("!") > 0
                file = params.shift()
                fileType = params.shift()
                @client.jsonrpcFile file,fileType,path.replace("!",""),params,(r,e)=>
                    if e and e.code is 592
                        @loginStatus = "incomplete"
                        @makeRequest path,params,callback
                    else
                        if callback
                            callback(r,e)
            else
                @client.jsonrpc path,params,(r,e)=>
                    if e and e.code is 592
                        @loginStatus = "incomplete"
                        @makeRequest path,params,callback
                    else
                        if callback
                            callback(r,e)

    timeline : ->
        if @loginStatus is 'complete'
            return new TimelineEvent @
        else
            throw new Error ("not login")

    login : (callback)->
        if @loginStatus is 'incomplete' or @loginStatus is 'proceeding'
            loginData=account : @username , password : @password ,  rememberme : "on"
            @client.login "#{@rootURL}/gateway/api/ajax_login.jsp",loginData, (data)=>
                if data
                    login_result = JSON.parse(data)
                    if login_result.result is 'SUCCESS'
                        @loginStatus = "complete"
                        try
                            if callback
                                callback(null,login_result)
                        catch ex
                            if callback
                                callback(ex)
                    else if login_result.result is 'ERROR'
                        @loginStatus = "incomplete"
                        if callback
                            callback("login_error")
                else
                    if callback
                        callback("login_error")
        else
            if callback
                callback()

module.exports = OTHERWebInstance                